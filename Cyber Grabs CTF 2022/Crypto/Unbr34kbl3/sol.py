from Crypto.Util.number import *
from math import gcd

n =int(235626422771812360156301460295447678247114862792823628566671437703894399296212996731923428958102150152294907758424828860102461483828572891255093676540696786710267839605889455974419363045575602645171791648951388493464439708994524968391028252802572566954795914419664760006824825588990928628925492877730622870167153721864338793005353088277949434794462024901128437522649945723641781530023840490611226576438033827302501565951887229316697650932725988296785207565442038016115235460176936506183413326595860233335100664378153639027038968735828589990097743244890000920444486718518885602757491517234490819406143690500839275915809421961849367413145252610003403367181013242912429219810478522574333792716226821144287777560425025214219546414655133560523885953493320789393479997991406534263790044799843102071758842209350910446225586206327089680490537057793750176037177458729988252116259090895829404720204721160780682827181572448695150071004976309633211099140709035175473112081705220149430578342284800811754939409784539)
ip = 86382223550814732620321081543174019262935130492167868692680865114537692095248009201254486200461760640514113170697468280591204192906583625360853333849234262776655682242235720859708767595235967306758159403177915222505703845943538742431720864150507057971717337268539570132309534167135860132164163451364430193602
iq =65505985829050621754273292397955022899240705954409722616198307560506717750666029524214826703576233205715903292992328465786288761844184213139984893110913912483672982242587597138037640594994056517725768559576577138653593514953590241822477884151163471025048189618233810197212845609387044697394133267018367571448
c1 =int(46681133373252528334300906275176003837231476202396301214894813519313306619830568008346673028450784225333157108149939270719726994873922343199809839805627067397452334032990155531795059706828824561003783280737037455147402174559045616710478897135418675247261174167904626330233613425972851856745234145707815921208465158174774895774566540430986048122747503898066127674257296178379341236138433961267822178207293976201038143547411115509949687848299352886958141853514515474926035489604545469266689943365899902733164204596534983402246191798920742065480463037759109477305303068862798214798456072813361462762662215485193297579243342216061407388230092979686462587333622285610182403351667639656387839938212492478657824232241340940925340282559291441317133248381225136842848326839705175620593338165314539428757171071001775874357904793775268952927377958332750021713476710172077304837841681585909778588575337372811861711451120957604347105058188752480373960182839489202088407424436759422666799103202328347648586435459759)
c2 =int(35941559495157859807991973170918474587970999772595069495386457045163989501219524914057002963258088654463987743603581128124409769180550889921359647840399051000641517610657753633452675805194270559259984649285645933297881542918306693591576923031838555530160821458513568520019734127388594014478851482857158792919726722405368384256884088192094119046479785888098302871052649704423669579735651155234868529082558579492087149624200443277744123513229204943660915457600424414000353085963201121706897093398750579948764941605799074985417672673728643732117526938236206248732423801154761344485142825647946777993712272769219787695556091921219787958913829901387074435845052942244794302862227470872027713771834975484799514478425669187663792665047377709198806346915543851105904188533476310580052313636514731824243061308159869653087544123178980118997879197445569356210972660455366337530837547669233760778125)
primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199]

''' To get e1,e2,e3
for x in range(2,21,2):
    for e1 in primes:
        for e2 in primes:
            if sum([pow(e1,k) for k in range(1,x+1)]) == (e2 + pow(e2,2)) and e1 != e2:
                print(f"{e1=}")
                print(f"{e2=}")
                print(f"{x=}")
                break
'''
e1,e2,x = 2,5,4
r = 2
while True:
    r = r*x
    if size(r) >1024 and isPrime(r-1):
        r = r-1
        break

pq = n // r

p,q = var('p q')
eq1 = ip*q + iq*p == pq + 1
eq2 = p * q == pq

sols = solve([eq1, eq2], p, q,solution_dict=True)

for sol in sols:
    if int(sol[p]) % 4 == 3 and int(sol[q]) % 4 == 3:
        p = int(sol[p])
        q = int(sol[q])
        break


#solving m1 - Rabin cryptosystem
r = int(r)
assert(r % 4 ==3)
mp = int(pow(c1,(p+1)//4 , p))
mq = int(pow(c1,(q+1)//4 , q))
mr = int(pow(c1,(r+1)//4 , r))

_mp = int(-mp % p)
_mq = int(-mq % q)
_mr = int(-mr % r)

b1 = int(inverse(n//p,p))
b2 = int(inverse(n//q,q))
b3 = int(inverse(n//r,r))

x1 = (mp*b1*(q*r) + mq*b2*(p*r) + mr*b3*(p*q)) % n
x2 = (_mp*b1*(q*r) + mq*b2*(p*r) + mr*b3*(p*q)) % n
x3 = (mp*b1*(q*r) + _mq*b2*(p*r) + mr*b3*(p*q)) % n
x4 = (mp*b1*(q*r) + mq*b2*(p*r) + _mr*b3*(p*q)) % n
x5 = n - x1
x6 = n - x2
x7 = n - x3
x8 = n - x4

combined = [x1,x2,x3,x4,x5,x6,x7,x8]
for pt in combined:
	m1 = long_to_bytes(pt)
	if b'cybergrabs{' in m1:
		print(m1)
		break

#solving m2 - Multi prime RSA
phin = (p-1) * (q-1) * (r-1)
d = inverse(e2,phin)
m2 = long_to_bytes(pow(c2,int(d),n))
print(m2)

# https://flag-poisoning.fr/writeup/unbreakable-cybergrabsctf/          
  